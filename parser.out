Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> execute
Rule 1     execute -> create
Rule 2     execute -> start
Rule 3     execute -> append
Rule 4     execute -> empty
Rule 5     object -> WINDOW
Rule 6     object -> GRID
Rule 7     object -> SPRITE
Rule 8     object -> CONTROLLER
Rule 9     object -> DRAW
Rule 10    create -> CREATE object parameters
Rule 11    start -> START
Rule 12    append -> ADD WINPOS parameters
Rule 13    parameters -> LP parameter RP
Rule 14    parameters -> LP parameter COMMA parameter RP
Rule 15    parameters -> LP parameter COMMA parameter COMMA parameter RP
Rule 16    parameters -> LP parameter COMMA parameter COMMA parameter COMMA parameter RP
Rule 17    parameters -> empty
Rule 18    parameter -> INT
Rule 19    parameter -> FLOAT
Rule 20    parameter -> STRING
Rule 21    parameter -> LP parameter COMMA parameter RP
Rule 22    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 12
COMMA                : 14 15 15 16 16 16 21
CONTROLLER           : 8
CREATE               : 10
DRAW                 : 9
FLOAT                : 19
GRID                 : 6
INT                  : 18
LP                   : 13 14 15 16 21
RP                   : 13 14 15 16 21
SPRITE               : 7
START                : 11
STRING               : 20
WINDOW               : 5
WINPOS               : 12
error                : 

Nonterminals, with rules where they appear

append               : 3
create               : 1
empty                : 4 17
execute              : 0
object               : 10
parameter            : 13 14 14 15 15 15 16 16 16 16 21 21
parameters           : 10 12
start                : 2

Parsing method: LALR

state 0

    (0) S' -> . execute
    (1) execute -> . create
    (2) execute -> . start
    (3) execute -> . append
    (4) execute -> . empty
    (10) create -> . CREATE object parameters
    (11) start -> . START
    (12) append -> . ADD WINPOS parameters
    (22) empty -> .

    CREATE          shift and go to state 6
    START           shift and go to state 7
    ADD             shift and go to state 8
    $end            reduce using rule 22 (empty -> .)

    execute                        shift and go to state 1
    create                         shift and go to state 2
    start                          shift and go to state 3
    append                         shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> execute .



state 2

    (1) execute -> create .

    $end            reduce using rule 1 (execute -> create .)


state 3

    (2) execute -> start .

    $end            reduce using rule 2 (execute -> start .)


state 4

    (3) execute -> append .

    $end            reduce using rule 3 (execute -> append .)


state 5

    (4) execute -> empty .

    $end            reduce using rule 4 (execute -> empty .)


state 6

    (10) create -> CREATE . object parameters
    (5) object -> . WINDOW
    (6) object -> . GRID
    (7) object -> . SPRITE
    (8) object -> . CONTROLLER
    (9) object -> . DRAW

    WINDOW          shift and go to state 10
    GRID            shift and go to state 11
    SPRITE          shift and go to state 12
    CONTROLLER      shift and go to state 13
    DRAW            shift and go to state 14

    object                         shift and go to state 9

state 7

    (11) start -> START .

    $end            reduce using rule 11 (start -> START .)


state 8

    (12) append -> ADD . WINPOS parameters

    WINPOS          shift and go to state 15


state 9

    (10) create -> CREATE object . parameters
    (13) parameters -> . LP parameter RP
    (14) parameters -> . LP parameter COMMA parameter RP
    (15) parameters -> . LP parameter COMMA parameter COMMA parameter RP
    (16) parameters -> . LP parameter COMMA parameter COMMA parameter COMMA parameter RP
    (17) parameters -> . empty
    (22) empty -> .

    LP              shift and go to state 17
    $end            reduce using rule 22 (empty -> .)

    parameters                     shift and go to state 16
    empty                          shift and go to state 18

state 10

    (5) object -> WINDOW .

    LP              reduce using rule 5 (object -> WINDOW .)
    $end            reduce using rule 5 (object -> WINDOW .)


state 11

    (6) object -> GRID .

    LP              reduce using rule 6 (object -> GRID .)
    $end            reduce using rule 6 (object -> GRID .)


state 12

    (7) object -> SPRITE .

    LP              reduce using rule 7 (object -> SPRITE .)
    $end            reduce using rule 7 (object -> SPRITE .)


state 13

    (8) object -> CONTROLLER .

    LP              reduce using rule 8 (object -> CONTROLLER .)
    $end            reduce using rule 8 (object -> CONTROLLER .)


state 14

    (9) object -> DRAW .

    LP              reduce using rule 9 (object -> DRAW .)
    $end            reduce using rule 9 (object -> DRAW .)


state 15

    (12) append -> ADD WINPOS . parameters
    (13) parameters -> . LP parameter RP
    (14) parameters -> . LP parameter COMMA parameter RP
    (15) parameters -> . LP parameter COMMA parameter COMMA parameter RP
    (16) parameters -> . LP parameter COMMA parameter COMMA parameter COMMA parameter RP
    (17) parameters -> . empty
    (22) empty -> .

    LP              shift and go to state 17
    $end            reduce using rule 22 (empty -> .)

    parameters                     shift and go to state 19
    empty                          shift and go to state 18

state 16

    (10) create -> CREATE object parameters .

    $end            reduce using rule 10 (create -> CREATE object parameters .)


state 17

    (13) parameters -> LP . parameter RP
    (14) parameters -> LP . parameter COMMA parameter RP
    (15) parameters -> LP . parameter COMMA parameter COMMA parameter RP
    (16) parameters -> LP . parameter COMMA parameter COMMA parameter COMMA parameter RP
    (18) parameter -> . INT
    (19) parameter -> . FLOAT
    (20) parameter -> . STRING
    (21) parameter -> . LP parameter COMMA parameter RP

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    LP              shift and go to state 20

    parameter                      shift and go to state 21

state 18

    (17) parameters -> empty .

    $end            reduce using rule 17 (parameters -> empty .)


state 19

    (12) append -> ADD WINPOS parameters .

    $end            reduce using rule 12 (append -> ADD WINPOS parameters .)


state 20

    (21) parameter -> LP . parameter COMMA parameter RP
    (18) parameter -> . INT
    (19) parameter -> . FLOAT
    (20) parameter -> . STRING
    (21) parameter -> . LP parameter COMMA parameter RP

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    LP              shift and go to state 20

    parameter                      shift and go to state 25

state 21

    (13) parameters -> LP parameter . RP
    (14) parameters -> LP parameter . COMMA parameter RP
    (15) parameters -> LP parameter . COMMA parameter COMMA parameter RP
    (16) parameters -> LP parameter . COMMA parameter COMMA parameter COMMA parameter RP

    RP              shift and go to state 26
    COMMA           shift and go to state 27


state 22

    (18) parameter -> INT .

    RP              reduce using rule 18 (parameter -> INT .)
    COMMA           reduce using rule 18 (parameter -> INT .)


state 23

    (19) parameter -> FLOAT .

    RP              reduce using rule 19 (parameter -> FLOAT .)
    COMMA           reduce using rule 19 (parameter -> FLOAT .)


state 24

    (20) parameter -> STRING .

    RP              reduce using rule 20 (parameter -> STRING .)
    COMMA           reduce using rule 20 (parameter -> STRING .)


state 25

    (21) parameter -> LP parameter . COMMA parameter RP

    COMMA           shift and go to state 28


state 26

    (13) parameters -> LP parameter RP .

    $end            reduce using rule 13 (parameters -> LP parameter RP .)


state 27

    (14) parameters -> LP parameter COMMA . parameter RP
    (15) parameters -> LP parameter COMMA . parameter COMMA parameter RP
    (16) parameters -> LP parameter COMMA . parameter COMMA parameter COMMA parameter RP
    (18) parameter -> . INT
    (19) parameter -> . FLOAT
    (20) parameter -> . STRING
    (21) parameter -> . LP parameter COMMA parameter RP

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    LP              shift and go to state 20

    parameter                      shift and go to state 29

state 28

    (21) parameter -> LP parameter COMMA . parameter RP
    (18) parameter -> . INT
    (19) parameter -> . FLOAT
    (20) parameter -> . STRING
    (21) parameter -> . LP parameter COMMA parameter RP

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    LP              shift and go to state 20

    parameter                      shift and go to state 30

state 29

    (14) parameters -> LP parameter COMMA parameter . RP
    (15) parameters -> LP parameter COMMA parameter . COMMA parameter RP
    (16) parameters -> LP parameter COMMA parameter . COMMA parameter COMMA parameter RP

    RP              shift and go to state 32
    COMMA           shift and go to state 31


state 30

    (21) parameter -> LP parameter COMMA parameter . RP

    RP              shift and go to state 33


state 31

    (15) parameters -> LP parameter COMMA parameter COMMA . parameter RP
    (16) parameters -> LP parameter COMMA parameter COMMA . parameter COMMA parameter RP
    (18) parameter -> . INT
    (19) parameter -> . FLOAT
    (20) parameter -> . STRING
    (21) parameter -> . LP parameter COMMA parameter RP

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    LP              shift and go to state 20

    parameter                      shift and go to state 34

state 32

    (14) parameters -> LP parameter COMMA parameter RP .

    $end            reduce using rule 14 (parameters -> LP parameter COMMA parameter RP .)


state 33

    (21) parameter -> LP parameter COMMA parameter RP .

    RP              reduce using rule 21 (parameter -> LP parameter COMMA parameter RP .)
    COMMA           reduce using rule 21 (parameter -> LP parameter COMMA parameter RP .)


state 34

    (15) parameters -> LP parameter COMMA parameter COMMA parameter . RP
    (16) parameters -> LP parameter COMMA parameter COMMA parameter . COMMA parameter RP

    RP              shift and go to state 36
    COMMA           shift and go to state 35


state 35

    (16) parameters -> LP parameter COMMA parameter COMMA parameter COMMA . parameter RP
    (18) parameter -> . INT
    (19) parameter -> . FLOAT
    (20) parameter -> . STRING
    (21) parameter -> . LP parameter COMMA parameter RP

    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    STRING          shift and go to state 24
    LP              shift and go to state 20

    parameter                      shift and go to state 37

state 36

    (15) parameters -> LP parameter COMMA parameter COMMA parameter RP .

    $end            reduce using rule 15 (parameters -> LP parameter COMMA parameter COMMA parameter RP .)


state 37

    (16) parameters -> LP parameter COMMA parameter COMMA parameter COMMA parameter . RP

    RP              shift and go to state 38


state 38

    (16) parameters -> LP parameter COMMA parameter COMMA parameter COMMA parameter RP .

    $end            reduce using rule 16 (parameters -> LP parameter COMMA parameter COMMA parameter COMMA parameter RP .)

